primer sequences for amplification of the two targets
#Primer  CGATGCKAAAGTGCCGAATA
#Trimmed NGATGCGAAAGTGCCGAATA ACTTTAATTTTGATCGCCTCCTTATCGATCAAGATCATAATAACCACGTCGTACTATTTGCGATTAGCAAAGACCGTCATGAAGTAGTTAAACTTAAGACAACGATGAAAGGGAATAATGTTGATAAAGCTTTTAAAAGTATCGAACCTGACATGCAGCCCTATAAGGAAATCATCACGAATAAAGATACAATAG
ACAAAGCAACACACGTGTTTGCACCAAGCAAACCGAAAGACTTAAAGAAGTATAGCATGGTCTTCAATAAGATCAGTGTTGAAAG
#Primer  CTTCATTTAAGAAGCCACCWTGACT
#Trimmed CTTCATTTAAGAAGCCACCATGACT 
ATTTATAAACTCGTATGNGCCTGGG (--> CCCAGGCNCATACGAGTTTATAAAT) ATGGTTTCTTGCATGTTGCTTGAACTTTTCGCGTCTTCAGATAAATTCTTATAATGATACATTTCATCTTTATCATTGTAGTTGGCGACGCCAGTATTGTTGTTGTATGTTGTCGTACAACTTTGAGAGCTACGAACAATCGTTGAATCATCAAATAGTATTGAGTTCATGCGTTCAACACTGATCGTATTGAAGACCATGCGATACGTCTTTAAGTCTTTCGGTTTGCTTGGTGCAACCACGTGTGTTGG
----->
ACTTTAATTTTGATCGCCTCCTTATCGATCAAGATCATAATAACCACGTCGTACTATATGCGATTAGCAAGGACCGTCATGAAGTAGTTAAACTTAAGACAACGATGAAAGGGAATAACGTTGATAAAGCTTTTAAAAGTATCGAACCTGATTTGCAGCCCTATACGGAAATCATCACGAATAAAGATACAATCGACAAAGCAACACACGTGTTAGCACCAAGCAAACCGAAAGACTTAAAGACGTATCGCATGGTCTTCAATACGATTAGTGTTGAACGCATGGACTCAATACTATTTGATGATTCAACGATTGTTCGTAGCTCTCAAAGTGGTACGACAACATACAACAACAATACTGGCGTCGCCAACTACAACGATAAAGATGAAATGTATCATTATAAGAATTTATCTGAAGACGCGAAAAGTTCAAGCAACATGCAAGAAACCAT CCCAGGCACATACGAGTTTATAAAT








# ----------------------------------- FOR EPIDOME ---------------------------

  
# ---------------------------------
# ---- STEP0: quality controls ----  
#under testrun2 should have epidome->/home/jhuang/Tools/epidome and rawdata
#(r4_base)R
BiocManager::install("dada2")
library(dada2); packageVersion("dada2")
path <- "~/DATA/Data_Holger_Epidome/testrun2/raw_data" # CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern=".R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern=".R2.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])




#--------------------------------------------------------------------------------------------------------
#---- STEP1: cutadapt instead of Trimmomatic (see ~/DATA/Data_Holger_Epidome/epidome/scripts/EPIDOME_yycH_cutadapt_loop.sh) ----
#epidome/scripts/EPIDOME_yycH_cutadapt_loop.sh 

#5′-CGATGCKAAAGTGCCGAATA-3′/5′-CTTCATTTAAGAAGCCACCWTGACT-3′ for yccH
#5′-TGGGTATGRCAATCACTTTACA-3′/5′-GCATCAAAAGCACTCTCATTACC-3′  for g216
cd raw_data
mkdir cutadapted_yccH cutadapted_g216
for file in *_R1.fastq.gz; do 
cutadapt -e 0.06 -g CGATGCKAAAGTGCCGAATA -G CTTCATTTAAGAAGCCACCWTGACT --pair-filter=any -o ../cutadapted_yccH/${file} --paired-output ../cutadapted_yccH/${file/R1.fastq.gz/R2.fastq.gz} --discard-untrimmed $file ${file/R1.fastq.gz/R2.fastq.gz}; 
done
for file in *_R1.fastq.gz; do 
cutadapt -e 0.06 -g TGGGTATGRCAATCACTTTACA -G GCATCAAAAGCACTCTCATTACC --pair-filter=any -o ../cutadapted_g216/${file} --paired-output ../cutadapted_g216/${file/R1.fastq.gz/R2.fastq.gz} --discard-untrimmed $file ${file/R1.fastq.gz/R2.fastq.gz}; 
done



# TO BE DELETED! 
##### Load dada2 output and metadata into R, make sure rownames in metadata match names of isolates
#epi01_table = read.table("epi01_dada_output.csv",sep = ";",header=TRUE,row.names=1)
#epi02_table = read.table("epi02_dada_output.csv",sep = ";",header=TRUE,row.names=1)
#metadata_table = read.table("metadata_table.txt")
#
##### Setup object for easy handling of data
#epidome_object = setup_epidome_object(epi01_table,epi02_table,metadata_table)




#----------------------------------------------------------------------------------------------------------
#---- STEP2 checking how many reads can be stitching from cutadapted_* to filtered_* (see ~/DATA/Data_Holger_Epidome/epidome/scripts/dada2_for_EPIDOME_yycH_runwise_pipeline.R) ----
#Input: cutadapted_yccH, cutadapted_g216
#Outputs: 16S_seqtab_from_dada2.rds
#         seqtab.csv
#         seqtab_nochim_16S.rds
#         seqtab_nochim_16S.csv
#         16S_seqtab_image.RData
#         track_16S.csv
#RUN: (r4_base) ./my_EPIDOME_yycH_runwise_pipeline.R
#RUN: (r4_base) ./my_EPIDOME_g216_runwise_pipeline.R
#RUN: (r4_base) ./my_EPIDOME_16S_runwise_pipeline.R



#-------------------------------------------------------------------------------------------------
#---STEP3 stitching and removing chimeras (see ~/DATA/Data_Holger_Epidome/epidome/scripts/Combine_and_Remove_Chimeras_yycH.R) ----
#my_Combine_and_Remove_Chimeras_g216.R is a part of my_EPIDOME_yycH_runwise_pipeline.R (see lines 53-55) --> IGNORED!




# ---------------------------------------------------------------------
# ---- STEP Classification: epidome/scripts/ASV_blast_classification.py ----
#Input: ASV_seqs.fasta and ASV_blast.txt
#Output files are classified.csv

seqtab_yycH_reseq29_from_dada2.csv



#TODO: manually generated yycH_seqtab_ASV_seqs.fasta generated from seqtab_nochim_g216.csv
cp seqtab_nochim_g216.csv g216_seqtab_ASV_seqs.fasta
#in kate ";"-->"\n>\n"



python3 epidome/scripts/ASV_blast_classification.py   seqtab_nochim_g216.csv g216_seqtab_ASV_seqs.fasta  epidome/DB/g216_ref_aln.fasta  g216_seqtab_ASV_blast.txt g216_seqtab.csv.classified.csv 99.5
python3 epidome/scripts/ASV_blast_classification.py   seqtab_nochim_yycH.csv yycH_seqtab_ASV_seqs.fasta  epidome/DB/yycH_ref_aln.fasta  yycH_seqtab_ASV_blast.txt yycH_seqtab.csv.classified.csv 99.5


#DEL: python3 epidome/scripts/ASV_blast_classification.py   yycH_seqtab.csv yycH_seqtab.csv.ASV_seqs.fasta  epidome/DB/yycH_ref_aln.fasta yycH_seqtab.csv.ASV_blast.txt yycH_seqtab.csv.classified.csv 99.5
#DEL: python3 epidome/scripts/ASV_blast_classification_combined.py -p1 190920_run1_yycH_seqtab_from_dada2.csv -p2 190920_run1_G216_seqtab_from_dada2.csv -p1_ref epidome/DB/yycH_ref_aln.fasta -p2_ref epidome/DB/g216_ref_aln.fasta 





rename "seqseq2" --> seq2
sed -i -e s/seq//g 190920_run1_yycH_seqtab_from_dada2.csv.ASV_blast.txt
sed -i -e s/seqseq/seq/g 190920_run1_yycH_seqtab_from_dada2.csv.classified.csv
diff 190920_run1_yycH_seqtab_from_dada2.csv.ASV_seqs.fasta epidome/example_data/190920_run1_yycH_seqtab_from_dada2.csv.ASV_seqs.fasta
diff 190920_run1_yycH_seqtab_from_dada2.csv.ASV_blast.txt epidome/example_data/190920_run1_yycH_seqtab_from_dada2.csv.ASV_blast.txt
diff 190920_run1_yycH_seqtab_from_dada2.csv.classified.csv epidome/example_data/190920_run1_yycH_seqtab_from_dada2.csv.classified.csv

#AAAT";"seq37,36";0;


#"ASV";"Seq_number";"even-mock3-1_S258_L001";"even-mock3-2_S282_L001";"even-mock3-3_S199_L001";"staggered-mock3-1_S270_L001";"staggered-mock3-2_S211_L001";"staggered-mock3-3_S223_L001"
#"ASV";"Seq_number";"Extraction_control_1";"Extraction_control_2";"P01_nose_1";"P01_nose_2";"P01_skin_1";"P01_skin_2";"P02_nose_1";"P02_nose_2";"P02_skin_1";"P02_skin_2";"P03_nose_1";"P03_nose_2";"P03_skin_1";"P03_skin_2";"P04_nose_1";"P04_nose_2";"P04_skin_1";"P04_skin_2";"P05_nose_1";"P05_nose_2";"P05_skin_1";"P05_skin_2";"P06_nose_1";"P06_nose_2";"P06_skin_1";"P06_skin_2";"P07_nose_1";"P07_nose_2";"P07_skin_1";"P07_skin_2";"P08_nose_1";"P08_nose_2";"P08_skin_1";"P08_skin_2";"P09_nose_1";"P09_nose_2";"P09_skin_1";"P09_skin_2";"P10_nose_1";"P10_nose_2";"P10_skin_1";"P10_skin_2";"P11_nose_1";"P11_nose_2";"P11_skin_1";"P11_skin_2";"even-mock3-1_S258_L001";"even-mock3-2_S282_L001";"even-mock3-3_S199_L001";"staggered-mock3-1_S270_L001";"staggered-mock3-2_S211_L001";"staggered-mock3-3_S223_L001"




source("epidome/scripts/epidome_functions.R")

ST_amplicon_table = read.table("epidome/DB/epidome_ST_amplicon_frequencies.txt",sep = "\t")
epi01_table = read.table("190920_run1_yycH_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi02_table = read.table("190920_run1_G216_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
metadata_table = read.table("epidome/example_data/article_metadata.txt",header=TRUE,row.names=1)

#epi01_mock_table = read.table("epidome/example_data/190920_run2_yycH_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
#epi01_clinical_table = read.table("epidome/example_data/190920_run1_yycH_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
#epi01_table = combine_ASV_tables(epi01_mock_table,epi01_clinical_table)



epi01_mock_table = read.table("epidome/example_data/190920_run2_G216_seqtab_from_dada2.csv.classified.csv",sep =";",header=TRUE,row.names=1)
epi02_mock_table = read.table("epidome/example_data/190920_run2_yycH_seqtab_from_dada2.csv.classified.csv",sep =";",header=TRUE,row.names=1)
epi01_clinical_table = read.table("epidome/example_data/190920_run1_G216_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi02_clinical_table = read.table("epidome/example_data/190920_run1_yycH_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi01_table = combine_ASV_tables(epi01_mock_table,epi01_clinical_table)
epi02_table = combine_ASV_tables(epi02_mock_table,epi02_clinical_table)


epidome_object = setup_epidome_object(epi01_table,epi02_table)
epidome_object = setup_epidome_object(epi01_table,epi02_table,metadata_table = metadata_table)

primer_compare = compare_primer_output(epidome_object,color_variable = "sample.type")
primer_compare$plot

eo_ASV_combined = combine_ASVs_epidome(epidome_object)
eo_filtered = filter_lowcount_samples_epidome(eo_ASV_combined,500,500)
#[1] "4 low count samples removed from data: P01_skin_2 Extraction_control_2 P09_skin_2 P09_skin_1"   

count_table = classify_epidome(eo_ASV_combined,ST_amplicon_table)
#count_df_ordered = count_table[order(rowSums(count_table),decreasing = T),]
#             staggered.mock3.3_S223_L001
#Unclassified                       13403
#218                                    0
#215                                10232
#73                                    59
#87                                 14885
#59                                     0
#130                                    0
#14                                  2598
#-                                   2261
#2                                      0
#225                                    0
#5                                   1009
#297                                    0
#384                                    0
#184                                    0
#355                                    0
#307                                 2017


#install.packages("pls")
#library(pls)

#count_table = count_table[-2,]
#row.names(count_table) <- c("-", "ST297", "ST170", "ST73", "ST225", "ST673", "ST215", "ST19", "Unclassified") 
#row.names(count_table) <- c("NA", "-", "X297", "X170", "X73", "X225", "X673", "X215", "X19", "Unclassified") 
p = make_barplot_epidome(count_table,reorder=FALSE,normalize=TRUE)
p = make_barplot_epidome(count_table,reorder=TRUE,normalize=TRUE)
p


eo_clinical = prune_by_variable_epidome(epidome_object,"sample.type",c("Clinical"))
eo_mock = prune_by_variable_epidome(epidome_object,"sample.type",c("Mock community"))

epidome_object_clinical_norm = normalize_epidome_object(eo_clinical) ### Normalize counts to percent

PCA_patient_colored = plot_PCA_epidome(epidome_object_clinical_norm,color_variable = "patient.ID",colors = c(),plot_ellipse = FALSE)
PCA_patient_colored + ggtitle("PCA plot of nose and skin samples colored by subject")
PCA_sample_site_colored = plot_PCA_epidome(epidome_object_clinical_norm,color_variable = "sample.site",colors = c("Red","Blue"),plot_ellipse = TRUE)
PCA_sample_site_colored + ggtitle("PCA plot of nose and skin samples colored by sampling site")

eo_filter_lowcount = filter_lowcount_samples_epidome(epidome_object,p1_threshold = 500,p2_threshold = 500)
eo_filter_ASVs = epidome_filtered_ASVs = filter_lowcount_ASVs_epidome(epidome_object,percent_threshold = 1)
epidome_object_normalized = normalize_epidome_object(epidome_object)
epidome_object_ASV_combined = combine_ASVs_epidome(epidome_object)
epidome_object_clinical = prune_by_variable_epidome(epidome_object,variable_name = "sample.type",variable_values = c("Clinical"))
epidome_object_mock = prune_by_variable_epidome(epidome_object,variable_name = "sample.type",variable_values = c("Mock community"))

eo_ASV_combined = combine_ASVs_epidome(epidome_object_mock)
count_table = classify_epidome(eo_ASV_combined,ST_amplicon_table)
p = make_barplot_epidome(count_table,reorder=TRUE,normalize=TRUE)
